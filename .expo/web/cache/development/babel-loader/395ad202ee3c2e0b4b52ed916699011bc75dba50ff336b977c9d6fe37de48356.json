{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckBox = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _jsxFileName = 'src/basic/Checkbox.js';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _Ionicons = require(\"@expo/vector-icons/Ionicons\");\nvar _Ionicons2 = _interopRequireDefault(_Ionicons);\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\nvar _platform = require(\"../theme/variables/platform\");\nvar _platform2 = _interopRequireDefault(_platform);\nvar _commonColor = require(\"../theme/variables/commonColor\");\nvar _computeProps = require(\"../utils/computeProps\");\nvar _computeProps2 = _interopRequireDefault(_computeProps);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar CheckBox = function (_Component) {\n  _inherits(CheckBox, _Component);\n  function CheckBox() {\n    _classCallCheck(this, CheckBox);\n    return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));\n  }\n  _createClass(CheckBox, [{\n    key: 'getInitialStyle',\n    value: function getInitialStyle(variables) {\n      var _props = this.props,\n        color = _props.color,\n        checked = _props.checked,\n        checkboxType = _props.checkboxType,\n        borderColor = _props.borderColor;\n      return {\n        checkStyle: {\n          borderRadius: this.getBorderRadius(checkboxType, variables),\n          borderColor: borderColor || color || variables.checkboxBgColor,\n          backgroundColor: checked === true ? color || variables.checkboxBgColor : variables.checkboxDefaultColor\n        }\n      };\n    }\n  }, {\n    key: 'getBorderRadius',\n    value: function getBorderRadius(checkboxType, variables) {\n      if (checkboxType === 'rounded') {\n        return 13;\n      }\n      if (checkboxType === 'square') {\n        return 0;\n      }\n      return variables.CheckboxRadius;\n    }\n  }, {\n    key: 'prepareRootProps',\n    value: function prepareRootProps(variables) {\n      var defaultProps = {\n        style: this.getInitialStyle(variables).checkStyle\n      };\n      return (0, _computeProps2.default)(this.props, defaultProps);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var _props2 = this.props,\n        checked = _props2.checked,\n        tickColor = _props2.tickColor;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      var platformStyle = variables.platformStyle;\n      var platform = variables.platform;\n      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.prepareRootProps(variables), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        }\n      }), _react2.default.createElement(_Ionicons2.default, {\n        style: {\n          color: checked === true ? tickColor || variables.checkboxTickColor : variables.checkboxDefaultColor,\n          fontSize: variables.CheckboxFontSize,\n          lineHeight: variables.CheckboxIconSize,\n          marginTop: variables.CheckboxIconMarginTop,\n          textShadowRadius: variables.checkboxTextShadowRadius\n        },\n        name: platform === _commonColor.PLATFORM.IOS && platformStyle !== _commonColor.PLATFORM.MATERIAL ? 'ios-checkmark' : 'md-checkmark',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        }\n      }));\n    }\n  }]);\n  return CheckBox;\n}(_react.Component);\nCheckBox.contextTypes = {\n  theme: _propTypes2.default.object\n};\nCheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),\n  checked: _propTypes2.default.bool,\n  onPress: _propTypes2.default.func\n});\nvar StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.CheckBox', {}, _mapPropsToStyleNames2.default)(CheckBox);\nexports.CheckBox = StyledCheckBox;","map":{"version":3,"names":["_react","require","_propTypes","_reactNative","_Ionicons","_nativeBaseShoutemTheme","_mapPropsToStyleNames","_platform","_commonColor","_computeProps","CheckBox","variables","_props","props","color","checked","checkboxType","borderColor","checkStyle","borderRadius","getBorderRadius","checkboxBgColor","backgroundColor","checkboxDefaultColor","CheckboxRadius","defaultProps","style","getInitialStyle","_computeProps2","default","_this2","_props2","tickColor","context","theme","_platform2","platformStyle","platform","_react2","createElement","TouchableOpacity","_extends","ref","c","_root","prepareRootProps","__source","fileName","_jsxFileName","lineNumber","_Ionicons2","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","name","PLATFORM","IOS","MATERIAL","Component","contextTypes","_propTypes2","object","propTypes","oneOfType","number","array","bool","onPress","func","StyledCheckBox","connectStyle","_mapPropsToStyleNames2"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\native-base\\src\\basic\\Checkbox.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked, checkboxType, borderColor } = this.props;\n    return {\n      checkStyle: {\n        borderRadius: this.getBorderRadius(checkboxType, variables),\n        borderColor: borderColor || color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getBorderRadius(checkboxType, variables) {\n    if (checkboxType === 'rounded') {\n      return 13;\n    }\n    if (checkboxType === 'square') {\n      return 0;\n    }\n    return variables.CheckboxRadius;\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked, tickColor } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? tickColor || variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}