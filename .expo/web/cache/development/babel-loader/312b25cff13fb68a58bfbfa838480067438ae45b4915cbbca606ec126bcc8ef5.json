{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nvar manifest = null;\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\nvar _ref = ExponentConstants || {},\n  name = _ref.name,\n  appOwnership = _ref.appOwnership,\n  nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri\n});\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get: function get() {\n      if (!manifest) {\n        var invalidManifestType = manifest === null ? 'null' : 'undefined';\n        if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n          console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n        } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n          throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n        }\n      }\n      return manifest;\n    },\n    set: function set(value) {\n      manifest = value;\n    }\n  }\n});\nexport default constants;","map":{"version":3,"names":["CodedError","NativeModulesProxy","Platform","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","manifest","ExpoUpdates","updatesManifest","manifestString","JSON","parse","Object","keys","length","_ref","name","appOwnership","nativeConstants","_objectWithoutProperties","constants","_objectSpread","deviceId","installationId","linkingUrl","linkingUri","defineProperties","enumerable","get","invalidManifestType","executionEnvironment","Bare","OS","StoreClient","Standalone","set","value"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\expo-constants\\src\\Constants.ts"],"sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Legacy aliases\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri,\n};\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      if (!manifest) {\n        const invalidManifestType = manifest === null ? 'null' : 'undefined';\n        if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n          Platform.OS !== 'web'\n        ) {\n          console.warn(\n            `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n          );\n        } else if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n        ) {\n          // If we somehow get here, this is a truly exceptional state to be in.\n          // Constants.manifest should *always* be defined in those contexts.\n          throw new CodedError(\n            'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n            `Constants.manifest is ${invalidManifestType}, must be an object.`\n          );\n        }\n      }\n      return manifest;\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n});\n\nexport default constants as Constants;\n"],"mappings":";;;;AAAA,SAASA,UAAU,EAAEC,kBAAkB,QAAQ,kBAAkB;AAAC,OAAAC,QAAA;AAGlE,SAEEC,YAAY,EAEZC,oBAAoB,EAIpBC,kBAAkB;AAGpB,OAAOC,iBAAiB;AAExB,SAEEH,YAAY,EAEZC,oBAAoB,EAIpBC,kBAAkB;AAIpB,IAAI,CAACC,iBAAiB,EAAE;EACtBC,OAAO,CAACC,IAAI,CACV,wGAAwG,CACzG;;AAGH,IAAIC,QAAQ,GAAG,IAAI;AAEnB,IAAIR,kBAAkB,CAACS,WAAW,EAAE;EAClC,IAAIC,eAAe;EACnB,IAAIV,kBAAkB,CAACS,WAAW,CAACD,QAAQ,EAAE;IAC3CE,eAAe,GAAGV,kBAAkB,CAACS,WAAW,CAACD,QAAQ;GAC1D,MAAM,IAAIR,kBAAkB,CAACS,WAAW,CAACE,cAAc,EAAE;IACxDD,eAAe,GAAGE,IAAI,CAACC,KAAK,CAACb,kBAAkB,CAACS,WAAW,CAACE,cAAc,CAAC;;EAE7E,IAAID,eAAe,IAAII,MAAM,CAACC,IAAI,CAACL,eAAe,CAAC,CAACM,MAAM,GAAG,CAAC,EAAE;IAC9DR,QAAQ,GAAGE,eAAe;;;AAK9B,IAAI,CAACF,QAAQ,IAAIH,iBAAiB,IAAIA,iBAAiB,CAACG,QAAQ,EAAE;EAChEA,QAAQ,GAAGH,iBAAiB,CAACG,QAAQ;EAErC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAChCA,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;;;AAElC,IAAAS,IAAA,GAEmDZ,iBAAiB,IAAI,EAAE;EAAnEa,IAAI,GAAAD,IAAA,CAAJC,IAAI;EAAEC,YAAY,GAAAF,IAAA,CAAZE,YAAY;EAAKC,eAAe,GAAAC,wBAAA,CAAAJ,IAAA;AAE9C,IAAMK,SAAS,GAAAC,aAAA,CAAAA,aAAA,KACVH,eAAe;EAElBD,YAAY,EAAEA,YAAY,WAAZA,YAAY,GAAI,IAAI;EAElCK,QAAQ,EAAEJ,eAAe,CAACK,cAAc;EACxCC,UAAU,EAAEN,eAAe,CAACO;AAAU,EACvC;AAEDb,MAAM,CAACc,gBAAgB,CAACN,SAAS,EAAE;EACjCd,QAAQ,EAAE;IACRqB,UAAU,EAAE,IAAI;IAChBC,GAAG,WAAAA,IAAA;MACD,IAAI,CAACtB,QAAQ,EAAE;QACb,IAAMuB,mBAAmB,GAAGvB,QAAQ,KAAK,IAAI,GAAG,MAAM,GAAG,WAAW;QACpE,IACEY,eAAe,CAACY,oBAAoB,KAAK7B,oBAAoB,CAAC8B,IAAI,IAClEhC,QAAQ,CAACiC,EAAE,KAAK,KAAK,EACrB;UACA5B,OAAO,CAACC,IAAI,4BACewB,mBAAmB,qKAAkK,CAC/M;SACF,MAAM,IACLX,eAAe,CAACY,oBAAoB,KAAK7B,oBAAoB,CAACgC,WAAW,IACzEf,eAAe,CAACY,oBAAoB,KAAK7B,oBAAoB,CAACiC,UAAU,EACxE;UAGA,MAAM,IAAIrC,UAAU,CAClB,oCAAoC,6BACXgC,mBAAmB,yBAAsB,CACnE;;;MAGL,OAAOvB,QAAQ;IACjB,CAAC;IAED6B,GAAG,WAAAA,IAACC,KAAK;MACP9B,QAAQ,GAAG8B,KAAK;IAClB;;CAEH,CAAC;AAEF,eAAehB,SAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}