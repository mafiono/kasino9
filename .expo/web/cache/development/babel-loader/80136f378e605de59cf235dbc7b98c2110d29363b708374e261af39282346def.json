{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'installationId';\nvar installationId = null;\nexport default function getInstallationIdAsync() {\n  return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!installationId) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", installationId);\n        case 2:\n          _context.prev = 2;\n          installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n          if (!installationId) {\n            _context.next = 6;\n            break;\n          }\n          return _context.abrupt(\"return\", installationId);\n        case 6:\n          _context.next = 10;\n          break;\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](2);\n        case 10:\n          installationId = uuidv4();\n          try {\n            localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n          } catch (error) {\n            console.debug('[expo-notifications] Could not save installation ID in persisted storage, it will get reset.', error);\n          }\n          return _context.abrupt(\"return\", installationId);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}","map":{"version":3,"names":["v4","uuidv4","INSTALLATION_ID_KEY","installationId","getInstallationIdAsync","_regeneratorRuntime","async","getInstallationIdAsync$","_context","prev","next","abrupt","localStorage","getItem","t0","setItem","error","console","debug","stop","Promise"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\expo\\src\\environment\\getInstallationIdAsync.web.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nconst INSTALLATION_ID_KEY = 'installationId';\n\nlet installationId: string | null = null;\n\nexport default async function getInstallationIdAsync() {\n  // Already cached value\n  if (installationId) {\n    return installationId;\n  }\n\n  try {\n    // No cached value, fetch from persisted storage\n    installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n    if (installationId) {\n      return installationId;\n    }\n  } catch (error) {\n    // If we weren't able to fetch one (for whatever reason)\n    // let's create a new one.\n  }\n\n  // No persisted value, set the cached value...\n  installationId = uuidv4();\n  // ...and try to persist it. Ignore the errors.\n  try {\n    localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n  } catch (error) {\n    console.debug(\n      '[expo-notifications] Could not save installation ID in persisted storage, it will get reset.',\n      error\n    );\n  }\n\n  return installationId;\n}\n"],"mappings":";AAAA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAEnC,IAAMC,mBAAmB,GAAG,gBAAgB;AAE5C,IAAIC,cAAc,GAAkB,IAAI;AAExC,eAAe,SAAeC,sBAAsBA,CAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,wBAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,KAE9CP,cAAc;YAAAK,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACTR,cAAc;QAAA;UAAAK,QAAA,CAAAC,IAAA;UAKrBN,cAAc,GAAGS,YAAY,CAACC,OAAO,CAACX,mBAAmB,CAAC;UAAC,KACvDC,cAAc;YAAAK,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACTR,cAAc;QAAA;UAAAK,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAM,EAAA,GAAAN,QAAA;QAAA;UAQzBL,cAAc,GAAGF,MAAM,EAAE;UAEzB,IAAI;YACFW,YAAY,CAACG,OAAO,CAACb,mBAAmB,EAAEC,cAAc,CAAC;WAC1D,CAAC,OAAOa,KAAK,EAAE;YACdC,OAAO,CAACC,KAAK,CACX,8FAA8F,EAC9FF,KAAK,CACN;;UACF,OAAAR,QAAA,CAAAG,MAAA,WAEMR,cAAc;QAAA;QAAA;UAAA,OAAAK,QAAA,CAAAW,IAAA;MAAA;IAAA;EAAA,yBAAAC,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}