{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, SwitchActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n    var _super = _createSuper(NavigationView);\n    function NavigationView() {\n      var _this;\n      _classCallCheck(this, NavigationView);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _super.call.apply(_super, [this].concat(args));\n      _defineProperty(_assertThisInitialized(_this), \"_renderScene\", function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent\n        });\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n        var route = _ref2.route,\n          focused = _ref2.focused,\n          tintColor = _ref2.tintColor,\n          _ref2$horizontal = _ref2.horizontal,\n          horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n        return null;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getLabelText\", function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n        return route.routeName;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getAccessibilityLabel\", function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n        var label = _this._getLabelText({\n          route: route\n        });\n        if (typeof label === 'string') {\n          var routes = _this.props.navigation.state.routes;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n        return undefined;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getTestID\", function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_makeDefaultHandler\", function (_ref6) {\n        var route = _ref6.route,\n          navigation = _ref6.navigation;\n        return function () {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabPress\", function (_ref7) {\n        var route = _ref7.route;\n        _this._isTabPress = true;\n        Promise.resolve().then(function () {\n          return _this._isTabPress = false;\n        });\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n          options = descriptor.options;\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabLongPress\", function (_ref8) {\n        var route = _ref8.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n          options = descriptor.options;\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleIndexChange\", function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_jumpTo\", function (routeName) {\n        var navigation = _this.props.navigation;\n        navigation.dispatch(SwitchActions.jumpTo({\n          routeName: routeName,\n          key: navigation.state.key\n        }));\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_isTabPress\", false);\n      return _this;\n    }\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n          descriptors = _this$props2.descriptors,\n          navigation = _this$props2.navigation,\n          screenProps = _this$props2.screenProps,\n          navigationConfig = _this$props2.navigationConfig;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n        return React.createElement(TabView, _extends({}, navigationConfig, descriptor.options, {\n          getLabelText: this._getLabelText,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          onTabLongPress: this._handleTabLongPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps\n        }));\n      }\n    }]);\n    return NavigationView;\n  }(React.Component);\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","createTabNavigator","TabView","NavigationView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_ref","route","_this$props","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","createElement","navigation","component","_ref2","focused","tintColor","_ref2$horizontal","horizontal","options","tabBarIcon","_ref3","tabBarLabel","title","routeName","_ref4","tabBarAccessibilityLabel","label","_getLabelText","routes","state","indexOf","undefined","_ref5","tabBarTestID","_ref6","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_ref7","_isTabPress","Promise","resolve","then","defaultHandler","_makeDefaultHandler","tabBarOnPress","_ref8","tabBarOnLongPress","jumpTo","_createClass","value","render","_this$props2","navigationConfig","_extends","getLabelText","getAccessibilityLabel","_getAccessibilityLabel","getTestID","_getTestID","renderIcon","_renderIcon","renderScene","_renderScene","onIndexChange","_handleIndexChange","onTabPress","_handleTabPress","onTabLongPress","_handleTabLongPress","Component","config","router"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\react-navigation-tabs\\lib\\module\\utils\\createTabNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}