{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../utils/DrawerProgressContext\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  interpolate = Animated.interpolate,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar PROGRESS_EPSILON = 0.05;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar Drawer = function (_React$PureComponent) {\n  _inherits(Drawer, _React$PureComponent);\n  var _super = _createSuper(Drawer);\n  function Drawer() {\n    var _this;\n    _classCallCheck(this, Drawer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(State.UNDETERMINED));\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          value = _ref2[0];\n        var open = Boolean(value);\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        value = _ref4[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n        value = _ref6[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), cond(eq(_this.gestureState, State.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, State.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props = _this.props,\n        hideStatusBar = _this$props.hideStatusBar,\n        statusBarAnimation = _this$props.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n    return _this;\n  }\n  _createClass(Drawer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n        open = _this$props2.open,\n        drawerPosition = _this$props2.drawerPosition,\n        drawerType = _this$props2.drawerType,\n        swipeDistanceThreshold = _this$props2.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props2.swipeVelocityThreshold,\n        hideStatusBar = _this$props2.hideStatusBar;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        gestureEnabled = _this$props3.gestureEnabled,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeEdgeWidth = _this$props3.swipeEdgeWidth,\n        sceneContainerStyle = _this$props3.sceneContainerStyle,\n        drawerStyle = _this$props3.drawerStyle,\n        overlayStyle = _this$props3.overlayStyle,\n        onGestureRef = _this$props3.onGestureRef,\n        renderDrawerContent = _this$props3.renderDrawerContent,\n        renderSceneContent = _this$props3.renderSceneContent,\n        gestureHandlerProps = _this$props3.gestureHandlerProps;\n      var right = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(this.drawerWidth, DIRECTION_RIGHT) : this.drawerWidth : this.translateX;\n      var offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = right ? {\n        right: 0,\n        width: open ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: open ? undefined : swipeEdgeWidth\n      };\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: this.progress\n      }, React.createElement(PanGestureHandler, _extends({\n        ref: onGestureRef,\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: gestureEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: styles.main\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle],\n        importantForAccessibility: open ? 'no-hide-descendants' : 'yes'\n      }, renderSceneContent({\n        progress: this.progress\n      }), React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(Animated.View, {\n        style: [styles.overlay, {\n          opacity: interpolate(this.progress, {\n            inputRange: [PROGRESS_EPSILON, 1],\n            outputRange: [0, 1]\n          }),\n          zIndex: cond(greaterThan(this.progress, PROGRESS_EPSILON), 0, -1)\n        }, overlayStyle]\n      }))), React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: open,\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, right ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity,\n          zIndex: drawerType === 'back' ? -1 : 0\n        }, drawerStyle]\n      }, renderDrawerContent({\n        progress: this.progress\n      })))));\n    }\n  }]);\n  return Drawer;\n}(React.PureComponent);\nexport { Drawer as default };\n_defineProperty(Drawer, \"defaultProps\", {\n  gestureEnabled: true,\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","PanGestureHandler","TapGestureHandler","State","Animated","DrawerProgressContext","Clock","Value","onChange","clockRunning","startClock","stopClock","interpolate","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","apply","concat","_defineProperty","_assertThisInitialized","props","drawerType","open","UNDETERMINED","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","undefined","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","manuallyTriggerSpring","_objectSpread","offsetX","_ref","_ref2","_slicedToArray","value","Boolean","toggleDrawer","_ref3","_ref4","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","_ref5","_ref6","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","e","setValue","layout","width","requestAnimationFrame","drawerOpacity","hidden","_this$props","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","_createClass","key","componentDidUpdate","prevProps","_this$props2","componentWillUnmount","render","_this2","_this$props3","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","left","createElement","Provider","progress","_extends","ref","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","content","transform","importantForAccessibility","handleTapStateChange","overlay","opacity","inputRange","outputRange","zIndex","Code","exec","accessibilityViewIsModal","removeClippedSubviews","OS","handleDrawerLayout","container","PureComponent","default","drawerPostion","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\react-navigation-drawer\\lib\\module\\views\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolate(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}