{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport Country from \"./country\";\nimport numberType from \"./resources/numberType.json\";\nvar libPhoneNumber = require('google-libphonenumber');\nvar phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nvar asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\nvar instance = null;\nvar PhoneNumber = function () {\n  function PhoneNumber() {\n    _classCallCheck(this, PhoneNumber);\n  }\n  _createClass(PhoneNumber, [{\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return Country.getAll();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(number) {\n      var dialCode = '';\n      if (number.charAt(0) === '+') {\n        var numericChars = '';\n        for (var i = 0; i < number.length; i++) {\n          var c = number.charAt(i);\n          if (this.isNumeric(c)) {\n            numericChars += c;\n            if (Country.getCountryCodes()[numericChars]) {\n              dialCode = number.substr(0, i + 1);\n            }\n            if (numericChars.length === 4) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n  }, {\n    key: \"getNumeric\",\n    value: function getNumeric(str) {\n      return str.replace(/\\D/g, '');\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"getCountryCodeOfNumber\",\n    value: function getCountryCodeOfNumber(number) {\n      var dialCode = this.getDialCode(number);\n      var numeric = this.getNumeric(dialCode);\n      var countryCode = Country.getCountryCodes()[numeric];\n      if (countryCode) {\n        return _.first(countryCode.filter(function (iso2) {\n          return iso2;\n        }));\n      }\n      return '';\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(number, iso2) {\n      try {\n        return phoneUtil.parse(number, iso2);\n      } catch (err) {\n        console.log(\"Exception was thrown: \" + err.toString());\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      if (phoneInfo) {\n        return phoneUtil.isValidNumber(phoneInfo);\n      }\n      return false;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, iso2) {\n      var formatter = new asYouTypeFormatter(iso2);\n      var formatted;\n      number.replace(/-/g, '').replace(/ /g, '').split('').forEach(function (n) {\n        return formatted = formatter.inputDigit(n);\n      });\n      return formatted;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      var type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n      return _.findKey(numberType, function (noType) {\n        return noType === type;\n      });\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return Country.getCountryDataByCode(iso2);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!instance) {\n        instance = new PhoneNumber();\n      }\n      return instance;\n    }\n  }]);\n  return PhoneNumber;\n}();\nexport default PhoneNumber.getInstance();","map":{"version":3,"names":["_","Country","numberType","libPhoneNumber","require","phoneUtil","PhoneNumberUtil","getInstance","asYouTypeFormatter","AsYouTypeFormatter","instance","PhoneNumber","_classCallCheck","_createClass","key","value","getAllCountries","getAll","getDialCode","number","dialCode","charAt","numericChars","i","length","c","isNumeric","getCountryCodes","substr","getNumeric","str","replace","n","isNaN","parseFloat","isFinite","getCountryCodeOfNumber","numeric","countryCode","first","filter","iso2","parse","err","console","log","toString","isValidNumber","phoneInfo","format","formatter","formatted","split","forEach","inputDigit","getNumberType","type","findKey","noType","getCountryDataByCode"],"sources":["C:/Users/adamk/Downloads/kasino9/node_modules/react-native-phone-input/lib/phoneNumber.js"],"sourcesContent":["import _ from 'lodash';\n\nimport Country from './country';\nimport numberType from './resources/numberType.json';\n\nconst libPhoneNumber = require('google-libphonenumber');\nconst phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nconst asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\n\nlet instance = null;\n\nclass PhoneNumber {\n  static getInstance() {\n    if (!instance) {\n      instance = new PhoneNumber();\n    }\n    return instance;\n  }\n\n  getAllCountries() {\n    return Country.getAll();\n  }\n\n  getDialCode(number) {\n    let dialCode = '';\n    // only interested in international numbers (starting with a plus)\n    if (number.charAt(0) === '+') {\n      let numericChars = '';\n      // iterate over chars\n      for (let i = 0; i < number.length; i++) {\n        const c = number.charAt(i);\n        // if char is number\n        if (this.isNumeric(c)) {\n          numericChars += c;\n          // if current numericChars make a valid dial code\n          // if (this.countryCodes[numericChars]) {\n          if (Country.getCountryCodes()[numericChars]) {\n            // store the actual raw string (useful for matching later)\n            dialCode = number.substr(0, i + 1);\n          }\n          // longest dial code is 4 chars\n          if (numericChars.length === 4) {\n            break;\n          }\n        }\n      }\n    }\n    return dialCode;\n  }\n\n  getNumeric(str) {\n    return str.replace(/\\D/g, '');\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  getCountryCodeOfNumber(number) {\n    const dialCode = this.getDialCode(number);\n    const numeric = this.getNumeric(dialCode);\n    const countryCode = Country.getCountryCodes()[numeric];\n\n    // countryCode[0] can be null -> get first element that is not null\n    if (countryCode) {\n      return _.first(countryCode.filter(iso2 => iso2));\n    }\n\n    return '';\n  }\n\n  parse(number, iso2) {\n    try {\n      return phoneUtil.parse(number, iso2);\n    } catch (err) {\n      console.log(`Exception was thrown: ${err.toString()}`);\n      return null;\n    }\n  }\n\n  isValidNumber(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n\n    if (phoneInfo) {\n      return phoneUtil.isValidNumber(phoneInfo);\n    }\n\n    return false;\n  }\n\n  format(number, iso2) {\n    const formatter = new asYouTypeFormatter(iso2)\n    let formatted;\n\n    number.replace(/-/g, '')\n      .replace(/ /g, '')\n      .split('')\n      .forEach(n => formatted = formatter.inputDigit(n));\n\n    return formatted;\n  }\n\n  getNumberType(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n    const type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n    return _.findKey(numberType, noType => noType === type);\n  }\n\n  getCountryDataByCode(iso2) {\n    return Country.getCountryDataByCode(iso2);\n  }\n}\n\nexport default PhoneNumber.getInstance();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}