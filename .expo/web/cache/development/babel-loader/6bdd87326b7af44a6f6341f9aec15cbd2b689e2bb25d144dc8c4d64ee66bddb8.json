{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\nvar THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nvar THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\nvar defaultTheme;\nvar resolveStyle = function resolveStyle(style, baseStyle) {\n  return normalizeStyle(resolveIncludes(style, baseStyle));\n};\nvar Theme = function () {\n  function Theme(themeStyle) {\n    _classCallCheck(this, Theme);\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n  _createClass(Theme, [{\n    key: \"createComponentStyle\",\n    value: function createComponentStyle(componentName, defaultStyle) {\n      if (this[THEME_STYLE_CACHE][componentName]) {\n        return this[THEME_STYLE_CACHE][componentName];\n      }\n      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);\n      this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n  }], [{\n    key: \"setDefaultThemeStyle\",\n    value: function setDefaultThemeStyle(style) {\n      defaultTheme = new Theme(style);\n    }\n  }, {\n    key: \"getDefaultTheme\",\n    value: function getDefaultTheme() {\n      if (!defaultTheme) {\n        defaultTheme = new Theme({});\n      }\n      return defaultTheme;\n    }\n  }]);\n  return Theme;\n}();\nexport { Theme as default };\nexport var ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});","map":{"version":3,"names":["PropTypes","resolveIncludes","mergeComponentAndThemeStyles","normalizeStyle","THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","themeStyle","_classCallCheck","_createClass","key","value","createComponentStyle","componentName","defaultStyle","componentIncludedStyle","setDefaultThemeStyle","getDefaultTheme","default","ThemeShape","shape","func","isRequired"],"sources":["C:/Users/adamk/Downloads/kasino9/node_modules/native-base-shoutem-theme/src/Theme.js"],"sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,eAAe;AACtB,OAAOC,4BAA4B;AACnC,OAAOC,cAAc;AAGrB,IAAMC,WAAW,GAAG,4BAA4B;AAChD,IAAMC,iBAAiB,GAAG,kCAAkC;AAE5D,IAAIC,YAAY;AAEhB,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAEC,SAAS;EAAA,OACpCN,cAAc,CAACF,eAAe,CAACO,KAAK,EAAEC,SAAS,CAAC,CAAC;AAAA;AAAC,IA0B/BC,KAAK;EACxB,SAAAA,MAAYC,UAAU,EAAE;IAAAC,eAAA,OAAAF,KAAA;IACtB,IAAI,CAACN,WAAW,CAAC,GAAGG,YAAY,CAACI,UAAU,CAAC;IAC5C,IAAI,CAACN,iBAAiB,CAAC,GAAG,CAAC,CAAC;EAC9B;EAACQ,YAAA,CAAAH,KAAA;IAAAI,GAAA;IAAAC,KAAA,EAgCD,SAAAC,qBAAqBC,aAAa,EAAEC,YAAY,EAAE;MAChD,IAAI,IAAI,CAACb,iBAAiB,CAAC,CAACY,aAAa,CAAC,EAAE;QAC1C,OAAO,IAAI,CAACZ,iBAAiB,CAAC,CAACY,aAAa,CAAC;MAC/C;MAEA,IAAME,sBAAsB,GAAGZ,YAAY,CACzCW,YAAY,EACZ,IAAI,CAACd,WAAW,CAClB,CAAC;MAOD,IAAI,CAACC,iBAAiB,CAAC,CAACY,aAAa,CAAC,GAAGf,4BAA4B,CACnEiB,sBAAsB,EACtB,IAAI,CAACf,WAAW,CAAC,CAACa,aAAa,CAAC,EAChC,IAAI,CAACb,WAAW,CAClB,CAAC;MAED,OAAO,IAAI,CAACC,iBAAiB,CAAC,CAACY,aAAa,CAAC;IAC/C;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAjDD,SAAAK,qBAA4BZ,KAAK,EAAE;MACjCF,YAAY,GAAG,IAAII,KAAK,CAACF,KAAK,CAAC;IACjC;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAMD,SAAAM,gBAAA,EAAyB;MACvB,IAAI,CAACf,YAAY,EAAE;QACjBA,YAAY,GAAG,IAAII,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B;MAEA,OAAOJ,YAAY;IACrB;EAAC;EAAA,OAAAI,KAAA;AAAA;AAAA,SAvBkBA,KAAK,IAAAY,OAAA;AA6D1B,OAAO,IAAMC,UAAU,GAAGvB,SAAS,CAACwB,KAAK,CAAC;EACxCR,oBAAoB,EAAEhB,SAAS,CAACyB,IAAI,CAACC;AACvC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}