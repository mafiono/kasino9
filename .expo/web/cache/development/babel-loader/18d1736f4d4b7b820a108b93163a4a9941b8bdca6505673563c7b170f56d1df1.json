{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Platform, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\nimport NativeLinking from \"./ExpoLinking\";\nimport { hasCustomScheme, resolveScheme } from \"./Schemes\";\nfunction validateURL(url) {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\nfunction getHostUri() {\n  var _Constants$manifest, _Constants$manifest2;\n  if ((_Constants$manifest = Constants.manifest) != null && _Constants$manifest.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (!((_Constants$manifest2 = Constants.manifest) != null && _Constants$manifest2.hostUri) && !hasCustomScheme()) {\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\nfunction isExpoHosted() {\n  var _Constants$manifest3;\n  var hostUri = getHostUri();\n  return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) || (_Constants$manifest3 = Constants.manifest) != null && _Constants$manifest3.developer));\n}\nfunction removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\nfunction removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\nfunction removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\nfunction removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\nfunction ensureLeadingSlash(input, shouldAppend) {\n  var hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return input + \"/\";\n  }\n  return input;\n}\nfunction ensureTrailingSlash(input, shouldAppend) {\n  var hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return \"/\" + input;\n  }\n  return input;\n}\nexport function makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 ? arguments[1] : undefined;\n  var scheme = arguments.length > 2 ? arguments[2] : undefined;\n  return createURL(path, {\n    queryParams: queryParams,\n    scheme: scheme,\n    isTripleSlashed: true\n  });\n}\nexport function createURL(path) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    scheme = _ref.scheme,\n    _ref$queryParams = _ref.queryParams,\n    queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n    _ref$isTripleSlashed = _ref.isTripleSlashed,\n    isTripleSlashed = _ref$isTripleSlashed === void 0 ? false : _ref$isTripleSlashed;\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n    var origin = ensureLeadingSlash(window.location.origin, false);\n    var _queryString = qs.stringify(queryParams);\n    if (_queryString) {\n      _queryString = \"?\" + _queryString;\n    }\n    var outputPath = path;\n    if (outputPath) outputPath = ensureTrailingSlash(path, true);\n    return encodeURI(\"\" + origin + outputPath + _queryString);\n  }\n  var resolvedScheme = resolveScheme({\n    scheme: scheme\n  });\n  var hostUri = getHostUri() || '';\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = \"/--/\" + removeLeadingSlash(path);\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = \"/\" + path;\n    }\n  } else {\n    path = '';\n  }\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n    try {\n      var parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = \"?\" + queryString;\n  }\n  hostUri = ensureTrailingSlash(hostUri, !isTripleSlashed);\n  return encodeURI(resolvedScheme + \":\" + (isTripleSlashed ? '/' : '') + \"/\" + hostUri + path + queryString);\n}\nexport function parse(url) {\n  validateURL(url);\n  var parsed = URL(url, true);\n  for (var param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]);\n  }\n  var queryParams = parsed.query;\n  var hostUri = getHostUri() || '';\n  var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n  var path = parsed.pathname || null;\n  var hostname = parsed.hostname || null;\n  var scheme = parsed.protocol || null;\n  if (scheme) {\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n  if (path) {\n    path = removeLeadingSlash(path);\n    var expoPrefix = null;\n    if (hostUriStripped) {\n      var parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n  return {\n    hostname: hostname,\n    path: path,\n    queryParams: queryParams,\n    scheme: scheme\n  };\n}\nexport function addEventListener(type, handler) {\n  NativeLinking.addEventListener(type, handler);\n}\nexport function removeEventListener(type, handler) {\n  NativeLinking.removeEventListener(type, handler);\n}\nexport function parseInitialURLAsync() {\n  var initialUrl;\n  return _regeneratorRuntime.async(function parseInitialURLAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n        case 2:\n          initialUrl = _context.sent;\n          if (initialUrl) {\n            _context.next = 5;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            scheme: null,\n            hostname: null,\n            path: null,\n            queryParams: null\n          });\n        case 5:\n          return _context.abrupt(\"return\", parse(initialUrl));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function sendIntent(action, extras) {\n  return _regeneratorRuntime.async(function sendIntent$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context2.next = 4;\n            break;\n          }\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.sendIntent(action, extras));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n          throw new UnavailabilityError('Linking', 'sendIntent');\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function openSettings() {\n  return _regeneratorRuntime.async(function openSettings$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'web')) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Linking', 'openSettings');\n        case 2:\n          if (!NativeLinking.openSettings) {\n            _context3.next = 6;\n            break;\n          }\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(NativeLinking.openSettings());\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(openURL('app-settings:'));\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getInitialURL() {\n  var _await$NativeLinking$;\n  return _regeneratorRuntime.async(function getInitialURL$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n        case 2:\n          _context4.t0 = _await$NativeLinking$ = _context4.sent;\n          if (!(_context4.t0 != null)) {\n            _context4.next = 7;\n            break;\n          }\n          _context4.t1 = _await$NativeLinking$;\n          _context4.next = 8;\n          break;\n        case 7:\n          _context4.t1 = null;\n        case 8:\n          return _context4.abrupt(\"return\", _context4.t1);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function openURL(url) {\n  return _regeneratorRuntime.async(function openURL$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          validateURL(url);\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.openURL(url));\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function canOpenURL(url) {\n  return _regeneratorRuntime.async(function canOpenURL$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          validateURL(url);\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.canOpenURL(url));\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function useUrl() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    url = _useState2[0],\n    setLink = _useState2[1];\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    addEventListener('url', onChange);\n    return function () {\n      return removeEventListener('url', onChange);\n    };\n  }, []);\n  return url;\n}\nexport * from \"./Linking.types\";","map":{"version":3,"names":["Platform","UnavailabilityError","Constants","invariant","qs","useEffect","useState","URL","NativeLinking","hasCustomScheme","resolveScheme","validateURL","url","getHostUri","_Constants$manifest","_Constants$manifest2","manifest","hostUri","removeScheme","linkingUri","replace","isExpoHosted","_Constants$manifest3","test","developer","removePort","removeLeadingSlash","removeTrailingSlashAndQueryString","ensureLeadingSlash","input","shouldAppend","hasSlash","endsWith","substring","length","ensureTrailingSlash","startsWith","makeUrl","path","arguments","undefined","queryParams","scheme","createURL","isTripleSlashed","_ref","_ref$queryParams","_ref$isTripleSlashed","OS","isDOMAvailable","origin","window","location","queryString","stringify","outputPath","encodeURI","resolvedScheme","queryStringMatchResult","match","paramsFromHostUri","parsedParams","parse","e","_objectSpread","parsed","param","query","decodeURIComponent","hostUriStripped","pathname","hostname","protocol","expoPrefix","parts","split","slice","concat","join","indexOf","addEventListener","type","handler","removeEventListener","parseInitialURLAsync","initialUrl","_regeneratorRuntime","async","parseInitialURLAsync$","_context","prev","next","awrap","getInitialURL","sent","abrupt","stop","Promise","sendIntent","action","extras","sendIntent$","_context2","openSettings","openSettings$","_context3","openURL","_await$NativeLinking$","getInitialURL$","_context4","t0","t1","openURL$","_context5","canOpenURL","canOpenURL$","_context6","useUrl","_useState","_useState2","_slicedToArray","setLink","onChange","event","then"],"sources":["C:\\Users\\adamk\\Downloads\\kasino9\\node_modules\\expo\\node_modules\\expo-linking\\src\\Linking.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport { ParsedURL, QueryParams, URLListener } from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (!Constants.manifest?.hostUri && !hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * **Examples**\n *\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object of parameters that will be converted into a query string.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the Expo config (app.config.js or app.json) under `expo.scheme`.\n *\n * **Examples**\n *\n * - Bare: `<scheme>://path` -- uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param scheme URI protocol `<scheme>://` that must be built into your native app.\n * @param queryParams An object of parameters that will be converted into a query string.\n */\nexport function createURL(\n  path: string,\n  {\n    scheme,\n    queryParams = {},\n    isTripleSlashed = false,\n  }: {\n    scheme?: string;\n    queryParams?: QueryParams;\n    isTripleSlashed?: boolean;\n  } = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureLeadingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureTrailingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureTrailingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n/**\n * Returns the components and query parameters for a given URL.\n *\n * @param url Input URL to parse\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts\n        .slice(1)\n        .concat(['--/'])\n        .join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n/**\n * Add a handler to Linking changes by listening to the `url` event type\n * and providing the handler\n *\n * See https://reactnative.dev/docs/linking.html#addeventlistener\n */\nexport function addEventListener(type: string, handler: URLListener) {\n  NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n *\n * See https://reactnative.dev/docs/linking.html#removeeventlistener\n */\nexport function removeEventListener(type: string, handler: URLListener) {\n  NativeLinking.removeEventListener(type, handler);\n}\n\n/**\n * **Native:** Parses the link that opened the app. If no link opened the app, all the fields will be \\`null\\`.\n * **Web:** Parses the current window URL.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n/**\n * Launch an Android intent with optional extras\n *\n * @platform android\n */\nexport async function sendIntent(\n  action: string,\n  extras?: { key: string; value: string | number | boolean }[]\n): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n/**\n * Attempt to open the system settings for an the app.\n *\n * @platform ios\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n/**\n * If the app launch was triggered by an app link,\n * it will give the link url, otherwise it will give `null`\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n/**\n * Try to open the given `url` with any of the installed apps.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns true because there is no API for detecting what URLs can be opened.\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n */\nexport function useUrl(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then(url => setLink(url));\n    addEventListener('url', onChange);\n    return () => removeEventListener('url', onChange);\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}